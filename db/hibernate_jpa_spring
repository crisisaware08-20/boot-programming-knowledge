                                        TRANSACTION AND CONCURRENCY


[] Defining database and system transaction essentials
[] Controlling concurrent access with Hibernate and JPA
[] Using non-transactional data access
[] Managing transactions with Spring and Spring Data




          +---------------+  tx1
          | unit of work 1| ___                  
          +---------------+    \____                         tx = session.beginTransaction()
          +---------------+ tx2     \____                    // do some work
          | unit of work 2|_____         \____               tx.commit
          +---------------+     \_________    \__ Session    catch(Exception): tx.rollback()
          +---------------+               \_  ___   |        finally: session.close()
          | unit of work 3|              ____/      |
          +---------------+  tx3   _____/           |
          +---------------+   ____/                 |
          | unit of work 4|__/                      |
          +---------------+                         |
                                                    |
                                                  +------+      is session shared between threads ?
                                                  | DBMS |
                                                  +------+


----------------------------------------------------------> 
(time)          T1


Several things in one go
1) Find the winning bid for the auction
2) Charge the seller of the item the cost of the auction
3) Notify the seller and successful bidder




low level transactions: database and system




New features in JPA2


New lock modes and exceptions for pessimistic locking
a) You can set lock optimistic or pesimistic on a @Query



































                                         Spring Chaotic Context
=============================================================================================

DataSource(javax.sql) - A factory for connection to the physical data source. An alternative to DriverManager facility.

The DataSource interface is implemented by a driver vendor. There are three types of implementations:
1. Basic implemenation -> produces a standard  Connection object
2. Connection pooling implementation
3. Distributed transaction implementation


Spring boot automatically configures a lightning-fast connection pool, either HikariCP, Appache Tomcat, or CommonsDBCP

//configure data source
//configure entity manager, an entity manager will require a data source
//configure transaction manager

+-----------------------------------------------------+
|@EnableJpaRepositories(                              |
|   basePackages = "com.baeldung.multipledb.dao.user",|
|   entityManagerFactoryRef = "userEntityManager",    |
|   transactionManagerRef = "userTransactionManager"  |
|)                                                    |
+-----------------------------------------------------+


+--------------------------------------------+
|@Test                                       |  @Transactional can specify the transactionManager bean responsible of
|@Transactional("userTransactionManager")    |  transaction's scope.
+--------------------------------------------+
================================================================================================






































